# -*- coding: utf-8 -*-
"""Iris Perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r2dSuJwi1Hj8HZartn7CSS-dbggr0pjD
"""

import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

s = os.path.join('https://archive.ics.uci.edu', 'ml',
                 'machine-learning-databases', 'iris','iris.data')
s = s.replace("\\","/");
print('URL:', s)
df = pd.read_csv(s,header=None,encoding='utf-8')

df

y = df.iloc[0:100, 4].values
y = np.where(y == 'Iris-setosa', -1, 1)

# extract sepal length and petal length
X = df.iloc[:100, [0, 2]].values

# plot data
plt.scatter(X[:50, 0], X[:50, 1],
            color='red', marker='o', label='setosa', edgecolor='black')
plt.scatter(X[50:100, 0], X[50:100, 1],
            color='blue', marker='s', label='versicolor', edgecolor='black')

plt.xlabel('sepal length [cm]')
plt.ylabel('petal length [cm]')
plt.legend(loc='upper left')



plt.show()



class Perceptron(object):
    """Perceptron classifier.


    """
    def __init__(self, eta = .01, n_iter=50, random_state=1):
        self.n_iter = n_iter
        self.eta = eta
        self.random_state = random_state
        self.iter_trained = -1

    def fit(self, X, y):

        rgen = np.random.RandomState(self.random_state)
        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])
        self.errors_ = []

        for _ in range(self.n_iter):
            errors = 0
            for xi, target in zip(X, y):
                update = self.eta * (target - self.predict(xi))
                self.w_[1:] += update * xi
                self.w_[0] += update
                errors += int(update != 0.0)
            self.errors_.append(errors)


        return self

    def net_input(self, X):
        """Calculate net input"""
        return np.dot(X, self.w_[1:]) + self.w_[0]

    def predict(self, X):
        """Return class label after unit step"""
        return np.where(self.net_input(X) >= 0.0, 1, -1)



ppn = Perceptron(eta=0.01, n_iter=20, random_state=1)

ppn.fit(X, y)

plt.plot(range(1, len(ppn.errors_) + 1), ppn.errors_, marker='o')
plt.xticks(range(1, 21))
plt.xlabel('Epochs')
plt.ylabel('Number of updates')


plt.show()



# Predict on dummy data
test_points = np.array([
    [1, 1],  # should be class -1
    [2, 2],  # should be class -1
    [5, 5],  # should be class +1
    [6, 6]   # should be class +1
])

print("\n=== Test Predictions ===")
for point in test_points:
    prediction = ppn.predict(point)
    label = "Class +1" if prediction == 1 else "Class -1"
    print(f"Input: {point} => Prediction: {label}")

# plot decision boundary
x_vals = np.linspace(0, 7, 100)
y_vals = -(ppn.w_[0] + ppn.w_[1] * x_vals) / ppn.w_[2]

plt.scatter(X[y == -1, 0], X[y == -1, 1], color='red', label='Class -1')
plt.scatter(X[y == 1, 0], X[y == 1, 1], color='blue', label='Class +1')
plt.plot(x_vals, y_vals, 'k--', label='Decision Boundary')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.title('Perceptron Decision Boundary')
plt.grid(True)
plt.show()





